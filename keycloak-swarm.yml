services:
  keycloak:
    image: jboss/keycloak:latest
    deploy:
      replicas: 1
      placement:
        # Docker (20.10.3) on Synology bug where env vars from env_file 
        # not set on container.
        # constraints: [node.platform.arch != aarch64]
        constraints:
          - node.platform.arch != aarch64
          - node.hostname != ${NAS_HOSTNAME}
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          memory: 768M
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-net
        - traefik.http.routers.keycloak-internal.rule=Host(`keycloak.cynicsoft.net`)
        - traefik.http.routers.keycloak-internal.middlewares=internal-whitelist
        - traefik.http.routers.keycloak-internal.entrypoints=https
        - traefik.http.routers.keycloak-internal.service=keycloak
        - traefik.http.routers.keycloak.rule=Host(`login-cynicsoft.duckdns.org`)
        - traefik.http.routers.keycloak.entrypoints=https
        - traefik.http.routers.keycloak.service=keycloak
        - traefik.http.services.keycloak.loadbalancer.server.scheme=https
        - traefik.http.services.keycloak.loadbalancer.server.port=8443
        - traefik.http.routers.keycloak-management.rule=Host(`keycloak-management.cynicsoft.net`)
        - traefik.http.routers.keycloak-management.entrypoints=https
        - traefik.http.routers.keycloak-management.middlewares=internal-whitelist
        - traefik.http.routers.keycloak-management.service=keycloak-management
        - traefik.http.services.keycloak-management.loadbalancer.server.port=9990
    command:
      - "-b 0.0.0.0"
      - "-bmanagement 0.0.0.0"
    env_file:
      - "${ENV_DIR:-swarm-envs}/swarm/keycloak-stack/keycloak.env"
      - "${ENV_DIR:-swarm-envs}/swarm/keycloak-stack/postgres.env"
    networks:
      - traefik-net
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro

  postgres:
    image: postgres:10
    env_file: ["${ENV_DIR:-swarm-envs}/swarm/keycloak-stack/postgres.env"]
    deploy:
      replicas: 1
      placement:
        # Docker (20.10.3) on Synology bug where env vars from env_file 
        # not set on container.
        # constraints: [node.platform.arch != aarch64]
        constraints:
          - node.platform.arch != aarch64
          - node.hostname != ${NAS_HOSTNAME}
    networks:
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - postgres_data:/var/lib/postgresql/data

  # Run on demand for debugging.
  adminer:
    image: adminer:latest
    deploy:
      mode: replicated
      replicas: 0
      placement:
        constraints: [node.platform.arch != aarch64]
      restart_policy:
        condition: none
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-net
        - traefik.http.routers.keycloak-adminer.priority=100
        - traefik.http.routers.keycloak-adminer.rule=Host(`keycloak.cynicsoft.net`) && Path(`/adminer`)
        - traefik.http.routers.keycloak-adminer.entrypoints=https
        - traefik.http.routers.keycloak-adminer.middlewares=internal-whitelist
        - traefik.http.services.keycloak-adminer.loadbalancer.server.port=8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - default
      - traefik-net
    environment:
      - ADMINER_DEFAULT_SERVER=postgres:5432

  # Keycloak postgres backup job
  keycloak-backup-db-job:
    image: docker-hub.cynicsoft.net/postgres-client:latest
    env_file: ["${ENV_DIR:-swarm-envs}/swarm/keycloak-stack/postgres.env"]
    deploy:
      mode: replicated
      replicas: 0
      placement:
        # Docker (20.10.3) on Synology bug where env vars from env_file 
        # not set on container.
        # constraints: [node.platform.arch != aarch64]
        constraints:
          - node.platform.arch != aarch64
          - node.hostname != ${NAS_HOSTNAME}
      restart_policy:
        condition: none
      labels:
        - swarm.cronjob.enable=true
        - swarm.cronjob.schedule=@daily
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
    networks:
      - healthchecks-swarm_default
      - default
    command: >-
      sh -c 'LOG=/logs/keycloak-backup-db-job.log;
      date > $$LOG &&
      echo "$$POSTGRES_HOST:$$POSTGRES_PORT:$$POSTGRES_DB:$$POSTGRES_USER:$$POSTGRES_PASSWORD" > /root/.pgpass &&
      wget -SO - http://tasks.healthchecks:8000/ping/32634678-a2ab-4904-9513-4c0115149b27/start >> $$LOG 2>&1 &&
      echo backing up db to backup dir... >> $$LOG &&
      pg_dump -c -h postgres -U $$POSTGRES_USER $$POSTGRES_DB | xz > /backups/data/postgres/keycloak_postgres_backup_$$(date +"%Y-%m-%d_%H_%M_%S").xz &&
      echo delete all but last 2 db backups... >> $$LOG &&
      ls -dt /backups/data/postgres/* | grep keycloak_postgres_backup_ | tail -n +3 | xargs rm -- >> $$LOG &&
      echo done. >> $$LOG &&
      wget -SO - http://tasks.healthchecks:8000/ping/32634678-a2ab-4904-9513-4c0115149b27 >> $$LOG 2>&1'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - postgres_data:/var/lib/postgresql/data
      - keycloak-stack_logs:/logs
      - backups:/backups


volumes:
  postgres_data:
    driver_opts:
      type: nfs
      o: addr=${NAS_HOST},nolock,noresvport,vers=2
      device: :${DATADIR}/keycloak-stack/postgres
  keycloak-stack_logs:
    driver_opts:
      type: nfs
      o: addr=${NAS_HOST},nolock,noresvport,vers=2
      device: :${DATADIR}/keycloak-stack/logs
  backups:
    driver_opts:
      type: nfs
      o: addr=${NAS_HOST},nolock,noresvport,vers=2
      device: :/volume1/docker/backups

networks:
  traefik-net:
    external: true
  healthchecks-swarm_default:
    external: true
  default:
    name: keycloak-stack_default
    driver: overlay
    attachable: true